{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { signin } from './authenticationAPI';\nimport jwt_decode from \"jwt-decode\"; // State - data (init)\n\nconst initialState = {\n  userName: \"\",\n  email: \"\",\n  token: \"\",\n  logged: false\n}; // // async (1)\n// // simple async method (component can call it...)\n// export const doSigninAsync = createAsyncThunk(\n//     'login/signin',\n//     async () => {\n//         const response = await signin();\n//         return response.data;\n//     }\n// );\n// export const authenticationSlice = createSlice({\n//     name: 'login',\n//     initialState,\n//     reducers: {\n//         logout: (state) => {\n//             state.token = \"\"\n//                     state.logged = false;\n//                     state.userName= \"\"\n//                     state.email=\"\"\n//           },\n//     },\n//     //  async  (3)\n//     //   happens when async done - callback\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(doSigninAsync.fulfilled, (state, action) => {\n//                 console.log(action.payload.access)\n//                 if (action.payload.access) {\n//                     state.token = action.payload.access\n//                     state.logged = true;\n//                     state.userName= jwt_decode(action.payload.access).username\n//                     state.email=jwt_decode(action.payload.access).eeemail\n//                     // console.log( state.email)\n//                 }\n//             });\n//     },\n// });\n// export sync method\n\nexport const {\n  logout\n} = authenticationSlice.actions; // export any part of the state\n\nexport const selectLogged = state => state.login.logged;\nexport const selectEmail = state => state.login.email;\nexport const selectUserName = state => state.login.userName;\nexport const selectToken = state => state.login.token; // export the reducer to the applicaion\n\nexport default authenticationSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","signin","jwt_decode","initialState","userName","email","token","logged","logout","authenticationSlice","actions","selectLogged","state","login","selectEmail","selectUserName","selectToken","reducer"],"sources":["C:/Users/idand/Desktop/7731.4/react_django_library/front_redux/library_front/src/features/authentication/authenticationSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { signin } from './authenticationAPI';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// State - data (init)\r\nconst initialState = {\r\n    userName: \"\",\r\n    email: \"\",\r\n    token: \"\",\r\n    logged: false\r\n};\r\n// // async (1)\r\n// // simple async method (component can call it...)\r\n// export const doSigninAsync = createAsyncThunk(\r\n//     'login/signin',\r\n//     async () => {\r\n//         const response = await signin();\r\n//         return response.data;\r\n//     }\r\n// );\r\n\r\n// export const authenticationSlice = createSlice({\r\n//     name: 'login',\r\n//     initialState,\r\n//     reducers: {\r\n//         logout: (state) => {\r\n//             state.token = \"\"\r\n//                     state.logged = false;\r\n//                     state.userName= \"\"\r\n//                     state.email=\"\"\r\n//           },\r\n//     },\r\n//     //  async  (3)\r\n//     //   happens when async done - callback\r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(doSigninAsync.fulfilled, (state, action) => {\r\n//                 console.log(action.payload.access)\r\n//                 if (action.payload.access) {\r\n//                     state.token = action.payload.access\r\n//                     state.logged = true;\r\n//                     state.userName= jwt_decode(action.payload.access).username\r\n//                     state.email=jwt_decode(action.payload.access).eeemail\r\n//                     // console.log( state.email)\r\n//                 }\r\n//             });\r\n//     },\r\n// });\r\n\r\n// export sync method\r\nexport const { logout } = authenticationSlice.actions;\r\n\r\n// export any part of the state\r\nexport const selectLogged = (state) => state.login.logged;\r\nexport const selectEmail = (state) => state.login.email;\r\nexport const selectUserName = (state) => state.login.userName;\r\nexport const selectToken = (state) => state.login.token;\r\n// export the reducer to the applicaion\r\nexport default authenticationSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EADO;EAEjBC,KAAK,EAAE,EAFU;EAGjBC,KAAK,EAAE,EAHU;EAIjBC,MAAM,EAAE;AAJS,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAM;EAAEC;AAAF,IAAaC,mBAAmB,CAACC,OAAvC,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYN,MAA5C;AACP,OAAO,MAAMO,WAAW,GAAIF,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYR,KAA3C;AACP,OAAO,MAAMU,cAAc,GAAIH,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYT,QAA9C;AACP,OAAO,MAAMY,WAAW,GAAIJ,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYP,KAA3C,C,CACP;;AACA,eAAeG,mBAAmB,CAACQ,OAAnC"},"metadata":{},"sourceType":"module"}