{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { signin } from './authenticationAPI';\nimport jwt_decode from \"jwt-decode\"; // State - data (init)\n\nconst initialState = {\n  userName: \"guest\",\n  email: \"\",\n  token: \"\",\n  logged: false\n}; // async (1)\n// simple async method (component can call it...)\n\nexport const doSigninAsync = createAsyncThunk('authentication/signin', async action => {\n  const response = await signin(action);\n  return response.data;\n});\nexport const doSignupAsync = createAsyncThunk('authentication/signup', async action => {\n  const response = await signup(action);\n  return response.data;\n});\nexport const authenticationSlice = createSlice({\n  name: 'authentication',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.token = \"\";\n      state.logged = false;\n      state.userName = \"\";\n      state.email = \"\";\n    }\n  },\n  //  async  (3)\n  //   happens when async done - callback\n  extraReducers: builder => {\n    builder.addCase(doSigninAsync.fulfilled, (state, action) => {\n      console.log(jwt_decode(action.payload.access));\n\n      if (action.payload.access) {\n        state.token = action.payload.access;\n        state.logged = true;\n        state.userName = jwt_decode(action.payload.access).username;\n        state.email = jwt_decode(action.payload.access).email; // console.log( state.email)\n      }\n    }); // .addCase(doSignupAsync.fulfilled, (state, action) => {\n    //     console.log(jwt_decode(action.payload)\n    //     if (action.payload) {\n    //         state.token = action.payload.access\n    //         state.logged = true;\n    //         state.userName= jwt_decode(action.payload.access).username\n    //         state.email=jwt_decode(action.payload.access).email\n    //     }\n    // });\n  }\n}); // export sync method\n\nexport const {\n  logout\n} = authenticationSlice.actions; // export any part of the state\n\nexport const authenticationSelector = state => state.authentication;\nexport const selectLogged = state => state.authentication.logged;\nexport const selectEmail = state => state.authentication.email;\nexport const selectUserName = state => state.authentication.userName;\nexport const selectToken = state => state.authentication.token; // export the reducer to the applicaion\n\nexport default authenticationSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","signin","jwt_decode","initialState","userName","email","token","logged","doSigninAsync","action","response","data","doSignupAsync","signup","authenticationSlice","name","reducers","logout","state","extraReducers","builder","addCase","fulfilled","console","log","payload","access","username","actions","authenticationSelector","authentication","selectLogged","selectEmail","selectUserName","selectToken","reducer"],"sources":["C:/Users/idand/Desktop/7731.4/react_django_library/front_redux/library_front/src/features/authentication/authenticationSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { signin, } from './authenticationAPI';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// State - data (init)\r\nconst initialState = {\r\n    userName: \"guest\",\r\n    email: \"\",\r\n    token: \"\",\r\n    logged: false\r\n};\r\n// async (1)\r\n// simple async method (component can call it...)\r\nexport const doSigninAsync = createAsyncThunk(\r\n    'authentication/signin',\r\n    async (action) => {\r\n        const response = await signin(action);\r\n        return response.data;\r\n    }\r\n);\r\n\r\nexport const doSignupAsync = createAsyncThunk(\r\n    'authentication/signup',\r\n    async (action) => {\r\n        const response = await signup(action);\r\n        return response.data;\r\n    }\r\n);\r\n\r\nexport const authenticationSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state) => {\r\n            state.token = \"\"\r\n                    state.logged = false;\r\n                    state.userName= \"\"\r\n                    state.email=\"\"\r\n          },\r\n    },\r\n    //  async  (3)\r\n    //   happens when async done - callback\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(doSigninAsync.fulfilled, (state, action) => {\r\n                console.log(jwt_decode(action.payload.access))\r\n                if (action.payload.access) {\r\n                    state.token = action.payload.access\r\n                    state.logged = true;\r\n                    state.userName= jwt_decode(action.payload.access).username\r\n                    state.email=jwt_decode(action.payload.access).email\r\n                    // console.log( state.email)\r\n                }\r\n            });\r\n            // .addCase(doSignupAsync.fulfilled, (state, action) => {\r\n            //     console.log(jwt_decode(action.payload)\r\n            //     if (action.payload) {\r\n            //         state.token = action.payload.access\r\n            //         state.logged = true;\r\n            //         state.userName= jwt_decode(action.payload.access).username\r\n            //         state.email=jwt_decode(action.payload.access).email\r\n            //     }\r\n            // });\r\n    },\r\n});\r\n\r\n// export sync method\r\nexport const { logout } = authenticationSlice.actions;\r\n\r\n// export any part of the state\r\nexport const authenticationSelector = (state) => state.authentication;\r\nexport const selectLogged = (state) => state.authentication.logged;\r\nexport const selectEmail = (state) => state.authentication.email;\r\nexport const selectUserName = (state) => state.authentication.userName;\r\nexport const selectToken = (state) => state.authentication.token;\r\n// export the reducer to the applicaion\r\nexport default authenticationSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,MAAT,QAAwB,qBAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,OADO;EAEjBC,KAAK,EAAE,EAFU;EAGjBC,KAAK,EAAE,EAHU;EAIjBC,MAAM,EAAE;AAJS,CAArB,C,CAMA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGT,gBAAgB,CACzC,uBADyC,EAEzC,MAAOU,MAAP,IAAkB;EACd,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACQ,MAAD,CAA7B;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACH,CALwC,CAAtC;AAQP,OAAO,MAAMC,aAAa,GAAGb,gBAAgB,CACzC,uBADyC,EAEzC,MAAOU,MAAP,IAAkB;EACd,MAAMC,QAAQ,GAAG,MAAMG,MAAM,CAACJ,MAAD,CAA7B;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACH,CALwC,CAAtC;AAQP,OAAO,MAAMG,mBAAmB,GAAGd,WAAW,CAAC;EAC3Ce,IAAI,EAAE,gBADqC;EAE3CZ,YAF2C;EAG3Ca,QAAQ,EAAE;IACNC,MAAM,EAAGC,KAAD,IAAW;MACfA,KAAK,CAACZ,KAAN,GAAc,EAAd;MACQY,KAAK,CAACX,MAAN,GAAe,KAAf;MACAW,KAAK,CAACd,QAAN,GAAgB,EAAhB;MACAc,KAAK,CAACb,KAAN,GAAY,EAAZ;IACT;EANG,CAHiC;EAW3C;EACA;EACAc,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACab,aAAa,CAACc,SAD3B,EACsC,CAACJ,KAAD,EAAQT,MAAR,KAAmB;MACjDc,OAAO,CAACC,GAAR,CAAYtB,UAAU,CAACO,MAAM,CAACgB,OAAP,CAAeC,MAAhB,CAAtB;;MACA,IAAIjB,MAAM,CAACgB,OAAP,CAAeC,MAAnB,EAA2B;QACvBR,KAAK,CAACZ,KAAN,GAAcG,MAAM,CAACgB,OAAP,CAAeC,MAA7B;QACAR,KAAK,CAACX,MAAN,GAAe,IAAf;QACAW,KAAK,CAACd,QAAN,GAAgBF,UAAU,CAACO,MAAM,CAACgB,OAAP,CAAeC,MAAhB,CAAV,CAAkCC,QAAlD;QACAT,KAAK,CAACb,KAAN,GAAYH,UAAU,CAACO,MAAM,CAACgB,OAAP,CAAeC,MAAhB,CAAV,CAAkCrB,KAA9C,CAJuB,CAKvB;MACH;IACJ,CAVL,EADwB,CAYpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACP;AAlC0C,CAAD,CAAvC,C,CAqCP;;AACA,OAAO,MAAM;EAAEY;AAAF,IAAaH,mBAAmB,CAACc,OAAvC,C,CAEP;;AACA,OAAO,MAAMC,sBAAsB,GAAIX,KAAD,IAAWA,KAAK,CAACY,cAAhD;AACP,OAAO,MAAMC,YAAY,GAAIb,KAAD,IAAWA,KAAK,CAACY,cAAN,CAAqBvB,MAArD;AACP,OAAO,MAAMyB,WAAW,GAAId,KAAD,IAAWA,KAAK,CAACY,cAAN,CAAqBzB,KAApD;AACP,OAAO,MAAM4B,cAAc,GAAIf,KAAD,IAAWA,KAAK,CAACY,cAAN,CAAqB1B,QAAvD;AACP,OAAO,MAAM8B,WAAW,GAAIhB,KAAD,IAAWA,KAAK,CAACY,cAAN,CAAqBxB,KAApD,C,CACP;;AACA,eAAeQ,mBAAmB,CAACqB,OAAnC"},"metadata":{},"sourceType":"module"}