{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { signin } from './authenticationAPI';\nimport jwt_decode from \"jwt-decode\"; // State - data (init)\n\nconst initialState = {\n  userName: \"\",\n  email: \"\",\n  token: \"\",\n  logged: false\n}; // // async (1)\n// // simple async method (component can call it...)\n// export const doSigninAsync = createAsyncThunk(\n//     'login/signin',\n//     async () => {\n//         const response = await signin();\n//         return response.data;\n//     }\n// );\n\nexport const authenticationSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.token = \"\";\n      state.logged = false;\n      state.userName = \"\";\n      state.email = \"\";\n    }\n  },\n  //  async  (3)\n  //   happens when async done - callback\n  extraReducers: builder => {\n    builder.addCase(doSigninAsync.fulfilled, (state, action) => {\n      console.log(action.payload.access);\n\n      if (action.payload.access) {\n        state.token = action.payload.access;\n        state.logged = true;\n        state.userName = jwt_decode(action.payload.access).username;\n        state.email = jwt_decode(action.payload.access).eeemail; // console.log( state.email)\n      }\n    });\n  }\n}); // export sync method\n\nexport const {\n  logout\n} = authenticationSlice.actions; // export any part of the state\n\nexport const selectLogged = state => state.login.logged;\nexport const selectEmail = state => state.login.email;\nexport const selectUserName = state => state.login.userName;\nexport const selectToken = state => state.login.token; // export the reducer to the applicaion\n\nexport default authenticationSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","signin","jwt_decode","initialState","userName","email","token","logged","authenticationSlice","name","reducers","logout","state","extraReducers","builder","addCase","doSigninAsync","fulfilled","action","console","log","payload","access","username","eeemail","actions","selectLogged","login","selectEmail","selectUserName","selectToken","reducer"],"sources":["C:/Users/idand/Desktop/7731.4/react_django_library/front_redux/library_front/src/features/authentication/authenticationSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { signin } from './authenticationAPI';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// State - data (init)\r\nconst initialState = {\r\n    userName: \"\",\r\n    email: \"\",\r\n    token: \"\",\r\n    logged: false\r\n};\r\n// // async (1)\r\n// // simple async method (component can call it...)\r\n// export const doSigninAsync = createAsyncThunk(\r\n//     'login/signin',\r\n//     async () => {\r\n//         const response = await signin();\r\n//         return response.data;\r\n//     }\r\n// );\r\n\r\nexport const authenticationSlice = createSlice({\r\n    name: 'login',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state) => {\r\n            state.token = \"\"\r\n                    state.logged = false;\r\n                    state.userName= \"\"\r\n                    state.email=\"\"\r\n          },\r\n    },\r\n    //  async  (3)\r\n    //   happens when async done - callback\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(doSigninAsync.fulfilled, (state, action) => {\r\n                console.log(action.payload.access)\r\n                if (action.payload.access) {\r\n                    state.token = action.payload.access\r\n                    state.logged = true;\r\n                    state.userName= jwt_decode(action.payload.access).username\r\n                    state.email=jwt_decode(action.payload.access).eeemail\r\n                    // console.log( state.email)\r\n                }\r\n            });\r\n    },\r\n});\r\n\r\n// export sync method\r\nexport const { logout } = authenticationSlice.actions;\r\n\r\n// export any part of the state\r\nexport const selectLogged = (state) => state.login.logged;\r\nexport const selectEmail = (state) => state.login.email;\r\nexport const selectUserName = (state) => state.login.userName;\r\nexport const selectToken = (state) => state.login.token;\r\n// export the reducer to the applicaion\r\nexport default authenticationSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EADO;EAEjBC,KAAK,EAAE,EAFU;EAGjBC,KAAK,EAAE,EAHU;EAIjBC,MAAM,EAAE;AAJS,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,mBAAmB,GAAGR,WAAW,CAAC;EAC3CS,IAAI,EAAE,OADqC;EAE3CN,YAF2C;EAG3CO,QAAQ,EAAE;IACNC,MAAM,EAAGC,KAAD,IAAW;MACfA,KAAK,CAACN,KAAN,GAAc,EAAd;MACQM,KAAK,CAACL,MAAN,GAAe,KAAf;MACAK,KAAK,CAACR,QAAN,GAAgB,EAAhB;MACAQ,KAAK,CAACP,KAAN,GAAY,EAAZ;IACT;EANG,CAHiC;EAW3C;EACA;EACAQ,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACaC,aAAa,CAACC,SAD3B,EACsC,CAACL,KAAD,EAAQM,MAAR,KAAmB;MACjDC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAP,CAAeC,MAA3B;;MACA,IAAIJ,MAAM,CAACG,OAAP,CAAeC,MAAnB,EAA2B;QACvBV,KAAK,CAACN,KAAN,GAAcY,MAAM,CAACG,OAAP,CAAeC,MAA7B;QACAV,KAAK,CAACL,MAAN,GAAe,IAAf;QACAK,KAAK,CAACR,QAAN,GAAgBF,UAAU,CAACgB,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAV,CAAkCC,QAAlD;QACAX,KAAK,CAACP,KAAN,GAAYH,UAAU,CAACgB,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAV,CAAkCE,OAA9C,CAJuB,CAKvB;MACH;IACJ,CAVL;EAWH;AAzB0C,CAAD,CAAvC,C,CA4BP;;AACA,OAAO,MAAM;EAAEb;AAAF,IAAaH,mBAAmB,CAACiB,OAAvC,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYpB,MAA5C;AACP,OAAO,MAAMqB,WAAW,GAAIhB,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYtB,KAA3C;AACP,OAAO,MAAMwB,cAAc,GAAIjB,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYvB,QAA9C;AACP,OAAO,MAAM0B,WAAW,GAAIlB,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYrB,KAA3C,C,CACP;;AACA,eAAeE,mBAAmB,CAACuB,OAAnC"},"metadata":{},"sourceType":"module"}