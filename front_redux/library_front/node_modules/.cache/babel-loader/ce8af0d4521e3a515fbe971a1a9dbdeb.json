{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { signin } from './authenticationAPI';\nimport jwt_decode from \"jwt-decode\"; // State - data (init)\n\nconst initialState = {\n  userName: \"\",\n  email: \"\",\n  token: \"\",\n  logged: false\n}; // async (1)\n// simple async method (component can call it...)\n\nexport const doSigninAsync = createAsyncThunk('signin', async e => {\n  const response = await signin(e);\n  return response.data;\n});\nexport const authenticationSlice = createSlice({\n  name: 'authentication',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.token = \"\";\n      state.logged = false;\n      state.userName = \"\";\n      state.email = \"\";\n    }\n  },\n  //  async  (3)\n  //   happens when async done - callback\n  extraReducers: builder => {\n    builder.addCase(doSigninAsync.fulfilled, (state, action) => {\n      console.log(jwt_decode(action.payload.access));\n\n      if (action.payload.access) {\n        state.token = action.payload.access;\n        state.logged = true;\n        state.userName = jwt_decode(action.payload.access).username;\n        state.email = jwt_decode(action.payload.access).eeemail; // console.log( state.email)\n      }\n    });\n  }\n}); // export sync method\n\nexport const {\n  logout\n} = authenticationSlice.actions; // export any part of the state\n\nexport const selectLogged = state => state.authentication.logged;\nexport const selectEmail = state => state.authentication.email;\nexport const selectUserName = state => state.authentication.userName;\nexport const selectToken = state => state.authentication.token; // export the reducer to the applicaion\n\nexport default authenticationSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","signin","jwt_decode","initialState","userName","email","token","logged","doSigninAsync","e","response","data","authenticationSlice","name","reducers","logout","state","extraReducers","builder","addCase","fulfilled","action","console","log","payload","access","username","eeemail","actions","selectLogged","authentication","selectEmail","selectUserName","selectToken","reducer"],"sources":["C:/Users/idand/Desktop/7731.4/react_django_library/front_redux/library_front/src/features/authentication/authenticationSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { signin } from './authenticationAPI';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// State - data (init)\r\nconst initialState = {\r\n    userName: \"\",\r\n    email: \"\",\r\n    token: \"\",\r\n    logged: false\r\n};\r\n// async (1)\r\n// simple async method (component can call it...)\r\nexport const doSigninAsync = createAsyncThunk(\r\n    'signin',\r\n    async (e) => {\r\n        const response = await signin(e);\r\n        return response.data;\r\n    }\r\n);\r\n\r\nexport const authenticationSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state) => {\r\n            state.token = \"\"\r\n                    state.logged = false;\r\n                    state.userName= \"\"\r\n                    state.email=\"\"\r\n          },\r\n    },\r\n    //  async  (3)\r\n    //   happens when async done - callback\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(doSigninAsync.fulfilled, (state, action) => {\r\n                console.log(jwt_decode(action.payload.access))\r\n                if (action.payload.access) {\r\n                    state.token = action.payload.access\r\n                    state.logged = true;\r\n                    state.userName= jwt_decode(action.payload.access).username\r\n                    state.email=jwt_decode(action.payload.access).eeemail\r\n                    // console.log( state.email)\r\n                }\r\n            });\r\n    },\r\n});\r\n\r\n// export sync method\r\nexport const { logout } = authenticationSlice.actions;\r\n\r\n// export any part of the state\r\nexport const selectLogged = (state) => state.authentication.logged\r\nexport const selectEmail = (state) => state.authentication.email;\r\nexport const selectUserName = (state) => state.authentication.userName;\r\nexport const selectToken = (state) => state.authentication.token;\r\n// export the reducer to the applicaion\r\nexport default authenticationSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EADO;EAEjBC,KAAK,EAAE,EAFU;EAGjBC,KAAK,EAAE,EAHU;EAIjBC,MAAM,EAAE;AAJS,CAArB,C,CAMA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGT,gBAAgB,CACzC,QADyC,EAEzC,MAAOU,CAAP,IAAa;EACT,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACQ,CAAD,CAA7B;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACH,CALwC,CAAtC;AAQP,OAAO,MAAMC,mBAAmB,GAAGZ,WAAW,CAAC;EAC3Ca,IAAI,EAAE,gBADqC;EAE3CV,YAF2C;EAG3CW,QAAQ,EAAE;IACNC,MAAM,EAAGC,KAAD,IAAW;MACfA,KAAK,CAACV,KAAN,GAAc,EAAd;MACQU,KAAK,CAACT,MAAN,GAAe,KAAf;MACAS,KAAK,CAACZ,QAAN,GAAgB,EAAhB;MACAY,KAAK,CAACX,KAAN,GAAY,EAAZ;IACT;EANG,CAHiC;EAW3C;EACA;EACAY,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACaX,aAAa,CAACY,SAD3B,EACsC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;MACjDC,OAAO,CAACC,GAAR,CAAYrB,UAAU,CAACmB,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAtB;;MACA,IAAIJ,MAAM,CAACG,OAAP,CAAeC,MAAnB,EAA2B;QACvBT,KAAK,CAACV,KAAN,GAAce,MAAM,CAACG,OAAP,CAAeC,MAA7B;QACAT,KAAK,CAACT,MAAN,GAAe,IAAf;QACAS,KAAK,CAACZ,QAAN,GAAgBF,UAAU,CAACmB,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAV,CAAkCC,QAAlD;QACAV,KAAK,CAACX,KAAN,GAAYH,UAAU,CAACmB,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAV,CAAkCE,OAA9C,CAJuB,CAKvB;MACH;IACJ,CAVL;EAWH;AAzB0C,CAAD,CAAvC,C,CA4BP;;AACA,OAAO,MAAM;EAAEZ;AAAF,IAAaH,mBAAmB,CAACgB,OAAvC,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIb,KAAD,IAAWA,KAAK,CAACc,cAAN,CAAqBvB,MAArD;AACP,OAAO,MAAMwB,WAAW,GAAIf,KAAD,IAAWA,KAAK,CAACc,cAAN,CAAqBzB,KAApD;AACP,OAAO,MAAM2B,cAAc,GAAIhB,KAAD,IAAWA,KAAK,CAACc,cAAN,CAAqB1B,QAAvD;AACP,OAAO,MAAM6B,WAAW,GAAIjB,KAAD,IAAWA,KAAK,CAACc,cAAN,CAAqBxB,KAApD,C,CACP;;AACA,eAAeM,mBAAmB,CAACsB,OAAnC"},"metadata":{},"sourceType":"module"}